class Solution {
    // 왼쪽 서브트리의 높이를 계산하는 헬퍼 메서드
    private int getLeftHeight(TreeNode node) {
        int height = 0;
        while (node != null) {
            height++;
            node = node.left;
        }
        return height;
    }

    // 오른쪽 서브트리의 높이를 계산하는 헬퍼 메서드
    private int getRightHeight(TreeNode node) {
        int height = 0;
        while (node != null) {
            height++;
            node = node.right;
        }
        return height;
    }

    public int countNodes(TreeNode root) {
        if (root == null) {
            return 0;
        }

        int leftHeight = getLeftHeight(root);
        int rightHeight = getRightHeight(root);

        if (leftHeight == rightHeight) {
            // 왼쪽 서브트리가 완전 이진 트리인 경우
            return (1 << leftHeight) - 1;
        } else {
            // 오른쪽 서브트리가 완전 이진 트리인 경우
            return 1 + countNodes(root.left) + countNodes(root.right);
        }
    }

    public static void main(String[] args) {
        // 테스트 트리 생성
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.left.right = new TreeNode(5);
        root.right.left = new TreeNode(6);

        // 노드 개수 계산 및 출력
        Solution sol = new Solution();
        System.out.println(sol.countNodes(root)); // 출력: 6
    }
}
