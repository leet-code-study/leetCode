class Solution {
    public int minMutation(String startGene, String endGene, String[] bank) {
        Set<String> bankSet = new HashSet<>(Arrays.asList(bank));
        if (!bankSet.contains(endGene)) return -1;

        char[] genes = {'A', 'C', 'G', 'T'};
        Queue<String> queue = new LinkedList<>();
        queue.offer(startGene);

        Set<String> visited = new HashSet<>();
        visited.add(startGene);

        int level = 0;

        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String current = queue.poll();
                if (current.equals(endGene)) return level;

                char[] arr = current.toCharArray();
                for (int pos = 0; pos < arr.length; pos++) {
                    char original = arr[pos];
                    for (char c : genes) {
                        if (c == original) continue;
                        arr[pos] = c;
                        String next = new String(arr);
                        if (bankSet.contains(next) && !visited.contains(next)) {
                            queue.offer(next);
                            visited.add(next);
                        }
                    }
                    arr[pos] = original;
                }
            }
            level++;
        }
        return -1;
    }
}
